{
    "base" : {
      "extract_clean_profile" : "Whether to run the pipeline module to obtain a profile from a clean image of the source",
      "process_rave_fit"      : "Whether to run the pipeline module to process/save a profile from an existing rave fit",
      "run_frank"             : "Whether to run the pipeline module to perform a (1D or 1+1D) frank fit",
      "reproduce_best_frank"  : "Whether to run a 1D frank fit using the 'bestfit' parameters in the source parameters .json (to reproduce the published fit). If True, all 'frank' parameters in this file will be overridden.",            
      "run_parametric"        : "Whether to run the pipeline module to perform a parametric fit to a nonparametric brightness profile",
      "aspect_ratio_fig"      : "Whether to generate a figure showing frank vertical inference results",
      "compare_models_fig"    : "Which models to compare in generated figures showing brightness and visibility profiles and images. Either 'null' to not generate figures, 'all' to compare clean/frank/rave in figures, or 'clean, frank' to compare only clean and frank in figures",
      "frank_multifit_fig"    : "Whether to generate figures comparing frank fits with different hyperparameter values",
      "input_dir"             : "Directory containing inputs for the pipeline (visibilities, rave fits, clean images)",
      "output_dir"            : "Parent directory in which pipeline results will be saved (in subdirectories <disk name>/<clean, rave, frank, parametric>. If null, output_dir will be set to input_dir"
    },
  
    "clean" : {
      "robust"                : "Robust weighting parameter value for clean and rave analysis, results processing",
      "rmax"                  : "Maximum radius for clean image profile extraction [arcsec]",
      "Nr"                    : "Number of radial bins for clean image profile extraction",
      "Nphi"                  : "Number of azimuthal bins for clean image profile extraction"
    }, 

    "rave" : {
      " "                     : "Rave-specific parameters would go here"
    }, 
  
    "frank" : {
      "rout"                  : "Maximum disc radius in the fit (best to overestimate size of source) [arcsec]",
      "N"                     : "Number of collocation points used in the fit (suggested range 100 - 300)",
      "alpha"                 : "Order parameter for the power spectrum's inverse Gamma prior (suggested range 1.00 - 1.50). Float or list (if a list, multiple fits will be performed)",
      "wsmooth"               : "Strength of smoothing applied to the power spectrum (suggested range 10^-4 - 10^-1). Float or list (if a list, multiple fits will be performed)",
      "method"                : "The fit method: 'Normal' to fit in linear brighness, 'LogNormal' to fit in logarithmic brightness",
      "I_scale"               : "Minimum brightness allowed for radial profile for frank fit. Should be lower than data noise floor",
      "max_iter"              : "Maximum number of fit iterations",
      "set_fstar"             : "Source for visibility amplitude to be treated as unresolved stellar emission (a constant subtracted from all real visibility amplitudes). One of ['MCMC', 'SED', 'custom'], which are set per source in the source parameters .json",
      "scale_height"         : "Scale-height(s) over which to run fits. Float, or list of [start, stop, num] for `np.logspace` call e.g. '[-2.5, -1, 10]' corresponds to `np.logspace(-2.5, -1, 10)`. If seeking to run a standard (non-vertical) frank fit, set to null", 
      "save_solution"         : "Whether to save 'sol' object (see frank.radial_fitters.FrankFitter)",
      "save_profile_fit"      : "Whether to save fitted brightness profile",
      "save_vis_fit"          : "Whether to save fitted visibility distribution",
      "save_uvtables"         : "Whether to save fitted and residual UV tables (these are reprojected)",
      "make_quick_fig"        : "Whether to make two figures showing basic results of the fit"
    },
  
    "parametric" : {
      "reference"             : "Which best-fit radial profile to fit a parametric form to. Either 'frank' or 'clean'.",      
      "form"                  : "A string, or list of parametric functional forms to fit to a nonparametric profile. One or more of ['asym_gauss', 'triple_gauss', 'double_powerlaw', 'double_powerlaw_erf', 'double_powerlaw_gauss', 'double_powerlaw_double_gauss', 'single_erf_powerlaw', 'double_erf_powerlaw'] (see 'parametric_forms.py').",
      "fit_range"             : "Radial range over which to fit the parametric form, unit=[arcsec]. If null, form will be fit to full radial profile.",
      "device"                : "The backend device on which to run the parametric fitter using JAX. Can be null, 'cpu', 'gpu', 'tpu', or one of `jax.devices()`. If null, JAX will use a GPU or TPU if available, else fall back to the CPU.",
      "learn_rate"            : "Learning rate for the parametric fit optimization",
      "niter"                 : "Number of iterations for the parametric fit optimization"
    },

    "plot" : {
      "bin_widths"            : "Widths in which to bin the observed visibilities for plotting. List of float [\\lambda]",
      "image_xy_bounds"       : "Plot axis bounds for (assumed square) images. List of length 2, unit=[arcsec], e.g., [-5, 5]",
      "frank_resid_im_robust" : "Robust value for dirty imaging frank residual visibilities"      
    }
  }  